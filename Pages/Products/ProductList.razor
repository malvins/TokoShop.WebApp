@page "/products"

@using System.Net.Http.Json
@using TokoShop.WebApp.Models.Products;
@inject HttpClient httpClient

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Items="_breadcrumbs">
        <ItemTemplate Context="item">
            <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
        </ItemTemplate>
    </MudBreadcrumbs>

    <MudPaper Class="d-flex d-sm-none mt-2 mb-2 flex-row-reverse" Elevation="0">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" IconSize="Size.Small">
            <MudButton>@_buttonText</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                <MudMenuItem OnClick="() => SetButtonText(0)">Export</MudMenuItem>
                <MudMenuItem OnClick="() => SetButtonText(1)">Import</MudMenuItem>
                <MudMenuItem OnClick="() => SetButtonText(2)">New Product</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudPaper>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<Meal>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">
        <ToolBarContent>
            <MudGrid Class="d-none d-sm-flex">
                <MudItem xs="12" md="5">
                    <MudText Typo="Typo.h6">Products</MudText>
                </MudItem>
                <MudItem xs="12" md="7">
                    <MudPaper Class="d-none d-sm-flex flex-row flex-grow-4 gap-2" Elevation="0">
                        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        <MudButton Size="Size.Small" IconSize="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.FileDownload" Color="Color.Primary">Import</MudButton>
                        <MudButton Size="Size.Small" IconSize="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.FileUpload" Color="Color.Primary">Export</MudButton>
                        <MudButton Size="Size.Small" IconSize="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">New Product</MudButton>
                    </MudPaper>                    
                </MudItem>
            </MudGrid>
            <MudGrid Class="d-block d-sm-none">
                <MudItem xs="12">
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Image</MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="Meal">Name</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Image"><MudImage Height="40" Src="@context.StrMealThumb"></MudImage></MudTd>
            <MudTd DataLabel="Name">@context.StrMeal</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private string _buttonText = "New Product";
    private void SetButtonText(int id)
    {
        switch (id)
        {
            case 0:
                _buttonText = "Export";
                break;
            case 1:
                _buttonText = "Import";
                break;
            case 2:
                _buttonText = "New Product";
                break;
        }
    }
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Products", href: null, disabled: true)
    };

    private IEnumerable<Meal> pagedData;
    private MudTable<Meal> table;

    private int totalItems;
    private string searchString = null;

    private async Task<TableData<Meal>> ServerReload(TableState state)
    {
        var rootData = await httpClient.GetFromJsonAsync<MealRoot>("https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood");
        var data = rootData.Meals;
        await Task.Delay(300);

        data = data?.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;

            if (element.StrMeal?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
                return true;
            if ($"{element.StrMeal}".Contains(searchString))
                return true;
            return false;
        }).ToList();

        if (data != null)
        {
            totalItems = data.Count();
            IOrderedEnumerable<Meal>? orderedList = null;
            switch (state.SortLabel)
            {
                case "name_field":
                    orderedList = data.OrderByDirection(state.SortDirection, o => o.StrMeal);
                    break;
            }

            if (orderedList != null)
            {
                data = orderedList.ToList();
            }
        }

        pagedData =  (data?? new List<Meal>()).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Meal>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
