@page "/products/add"
@using System.ComponentModel.DataAnnotations;
@using TokoShop.WebApp.Models.Products;
@inject Services.IProductService ProductService

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Items="_breadcrumbs">
        <ItemTemplate Context="item">
            <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
        </ItemTemplate>
    </MudBreadcrumbs>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="form" @bind-IsValid="@success" Model="@Product">
                    <MudTextField T="string" @bind-Value="Product.Name" Label="Name" For="@(() => Product.Name)" />
                    <MudTextField T="string" @bind-Value="Product.Description" Label="Description" Lines="4" For="@(() => Product.Description)" />
                    <MudTextField T="string" @bind-Value="Product.ImageUrl" Label="Image Url" For="@(() => Product.ImageUrl)" />
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Disabled="@isAnyError" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=> await this.SubmitForm())">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">@validationResult</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
                @if (isAnyProducts)
                {
                    <MudText Color="Color.Success">Ada produk</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    public IEnumerable<Product>? Products;
    private ProductFormModel Product { get; set; } = new ProductFormModel();
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Add Product", href: null, disabled: true)
    };
    bool success;
    bool isAnyError;
    bool isAnyProducts;
    MudForm form;
    string validationResult = "failed";
    public class ProductFormModel
    {
        [Required]
        [MinLength(8, ErrorMessage = "Name length must be more than 8.")]
        public string Name { get; set; }

        [Required]
        [MinLength(8, ErrorMessage = "Description length must be more than 8.")]
        public string Description { get; set; }

        [Required]
        public string ImageUrl { get; set; }
    }

    private void ValidChanged()
    {
        isAnyError = !success;
    }

    private async Task SubmitForm()
    {
        this.form.Validate().Wait();
        if (!this.success)
        {
            validationResult = string.Join(";", form.Errors);
            return;
        }

        validationResult = "oke";
        var product = new Product()
            {
                Id = Guid.NewGuid().ToString(),
                Name = this.Product.Name,
                Description = this.Product.Description,
                ImageUrl = this.Product.ImageUrl
            };
        await ProductService.AddProduct(product);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (this.Products?.Any() != true)
        {
            this.Products = await ProductService.GetAllAsync();
            isAnyProducts = this.Products.Any();
        }
    }
}
