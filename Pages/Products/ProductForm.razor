@page "/product"
@page "/product/{ProductId}"
@page "/TokoShopWebApp/product"
@page "/TokoShopWebApp/product/{ProductId}"

@using System.ComponentModel.DataAnnotations;
@using TokoShop.WebApp.Models.Products;

@inject Services.IProductService ProductService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Items="BreadCrumbs">
        <ItemTemplate Context="item">
            <MudLink OnClick=@(() => NavigationManager.NavigateTo(item.Href ?? "/"))>@item.Text.ToUpper()</MudLink>
            </ItemTemplate>
        </MudBreadcrumbs>
        <MudPaper Class="d-flex pa-2 mb-4 flex-grow-1 gap-4">
            <MudPaper Class="flex-1 d-flex" Elevation="0">
                <MudText Typo="Typo.h6">Form</MudText>
            </MudPaper>
            <MudPaper Class="flex-none d-flex flex-row-reverse" Width="40%" Elevation="0">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=> await this.SubmitForm())">Save</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick='@(()=>NavigationManager.NavigateTo("products"))' Class="mx-2">Cancel</MudButton>
            </MudPaper>

        </MudPaper>

        <MudForm @ref="_form" @bind-IsValid="@_isSuccess" Model="@Product">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudPaper Class="pa-4">
                        <MudTextField T="string" @bind-Value="Product.Name" Label="Name" For="@(() => Product.Name)" />
                        <MudTextField T="double" @bind-Value="Product.BasePrice" Label="Price" For="@(() => Product.BasePrice)" />
                        <MudTextField T="string" @bind-Value="Product.Description" Label="Description" Lines="2" For="@(() => Product.Description)" />
                        <MudTextField T="string" @bind-Value="Product.ImageUrl" Label="Image Url" For="@(() => Product.ImageUrl)" />
                        <MudSwitch T="bool" CheckedChanged="TrackInventoryChanged"
                                   LabelPosition="LabelPosition.End"
                                   Color="@Color.Primary"
                                   Label="Track Inventory" Class="mt-2 mb-2">
                        </MudSwitch>
                        <MudInputLabel>@Product.Description</MudInputLabel>

                        <MudTextField T="int" @bind-Value="Product.Stock" Label="Stock" For="@(() => Product.Stock)" Class="@(_isTrackInventory ? "d-block":"d-none")" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-4">
                        <MudText>Categories</MudText>
                        @foreach (var sc in this.SelectedCategories)
                        {
                        <MudChip Color="this._randomChipColors[_random.Next(0,this._randomChipColors.Length)]" OnClose="RemoveCategory" Value="sc">@sc</MudChip>
                        }
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudAutocomplete T="string" Label="Search Categories ..."
                                     SearchFunc="@SearchCategories"
                                     ShowProgressIndicator="true"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="false"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     AdornmentColor="Color.Primary"
                                     SelectValueOnTab="true"
                                     ValueChanged="@SelectedCategoryChanged" />

                </MudPaper>

            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

@code {
    [Parameter]
    public string? ProductId { get; set; }

    private bool _isSuccess;
    private bool _isEditForm;
    private bool _isTrackInventory = false;
    private MudForm _form;
    private string _validationResult = "failed";
    private Random _random = new Random();
    private Color[] _randomChipColors = { Color.Primary, Color.Info, Color.Success };

    private string[] _states =
    {
        "Vegetables", "Dairy", "Meat", "Fish", "Condiments & Spices"
        , "Snacks", "Beverages", "Frozen Foods"
    };

    private List<string> SelectedCategories = new List<string>();

    private ProductFormModel Product { get; set; } = new ProductFormModel();
    private List<BreadcrumbItem> BreadCrumbs = new List<BreadcrumbItem>();

    protected override async Task OnParametersSetAsync()
    {
        _isEditForm = !string.IsNullOrEmpty(ProductId);
        if (_isEditForm)
        {
            try
            {
                var guid = Guid.Parse(ProductId);
                var product = await this.ProductService.GetByIdAsync(guid);
                if (product == null)
                {
                    NavigationManager.NavigateTo("product");
                }
                else
                {
                    this.Product = new ProductFormModel()
                        {
                            Id = product.Id,
                            BasePrice = product.BasePrice,
                            Description = product.Description,
                            ImageUrl = product.ImageUrl,
                            Name = product.Name
                        };

                }
            }
            catch (Exception)
            {

                NavigationManager.NavigateTo("product");
            }
        }
        BreadCrumbs = new List<BreadcrumbItem>()
                    {
                        new BreadcrumbItem("Home", href: "/TokoShopWebApp"),
                        new BreadcrumbItem("Products", href: "/TokoShopWebApp/products"),
                        new BreadcrumbItem(_isEditForm ? Product.Name: "New Product", href: null, disabled: true)
                    };
    }

    private async Task SubmitForm()
    {
        this._form.Validate().Wait();
        if (!this._isSuccess)
        {
            this._validationResult = string.Join(";", _form.Errors);
            return;
        }

        this._validationResult = "oke";
        var product = new Product()
            {
                Id = _isEditForm ? this.Product.Id : Guid.NewGuid().ToString(),
                Name = this.Product.Name,
                Description = this.Product.Description,
                ImageUrl = this.Product.ImageUrl,
                BasePrice = this.Product.BasePrice,
                EnableTrackInventory = this._isTrackInventory,
                Stock = this.Product.Stock,
            };

        var result = _isEditForm ? await this.ProductService.UpdateProduct(product) : await this.ProductService.AddProduct(product);
        if (result)
        {
            NavigationManager.NavigateTo("products");
        }
    }

    private void TrackInventoryChanged()
    {
        _isTrackInventory = !_isTrackInventory;
    }

    private async Task<IEnumerable<string>> SearchCategories(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        return _states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void SelectedCategoryChanged(string value)
    {

        if (string.IsNullOrEmpty(value))
            return;

        if (this.SelectedCategories.Any(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)))
            return;

        this.SelectedCategories.Add(value);
    }

    private void RemoveCategory(MudChip chip)
    {
        if (chip?.Value == null)
            return;

        var chipValue = chip?.Value?.ToString()?.ToLowerInvariant();
        if (string.IsNullOrEmpty(chipValue))
            return;
        this.SelectedCategories.RemoveAll(x => x.ToLowerInvariant() == chipValue);
    }


    public class ProductFormModel
    {
        [Required]
        [MinLength(8, ErrorMessage = "Name length must be more than 8.")]
        public string Name { get; set; }

        [Required]
        [MinLength(8, ErrorMessage = "Description length must be more than 8.")]
        public string Description { get; set; }

        [Required]
        public string ImageUrl { get; set; }

        [Required]
        public double BasePrice { get; set; }

        public int Stock { get; set; }

        public string Id { get; set; }
    }
}
