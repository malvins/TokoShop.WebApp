@page "/products/add"
@page "/TokoShopWebApp/products/add"
@using System.ComponentModel.DataAnnotations;
@using TokoShop.WebApp.Models.Products;
@inject Services.IProductService ProductService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Items="BreadCrumbs">
        <ItemTemplate Context="item">
            <MudLink OnClick=@(() => NavigationManager.NavigateTo(item.Href ?? "/"))>@item.Text.ToUpper()</MudLink>
        </ItemTemplate>
    </MudBreadcrumbs>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudText Align="Align.Center" Class="mb-n4">Product Form</MudText>
                <MudForm @ref="_form" @bind-IsValid="@_isSuccess" Model="@Product">
                    <MudTextField T="string" @bind-Value="Product.Name" Label="Name" For="@(() => Product.Name)" />
                    <MudNumericField T="double" @bind-Value="Product.BasePrice" Label="Price" For="@(() => Product.BasePrice)" />
                    <MudTextField T="string" @bind-Value="Product.Description" Label="Description" Lines="2" For="@(() => Product.Description)" />
                    <MudTextField T="string" @bind-Value="Product.ImageUrl" Label="Image Url" For="@(() => Product.ImageUrl)" />
                </MudForm>
            </MudPaper>
            <MudPaper Class="d-flex pa-2 mt-4 flex-row-reverse">
                <MudButton Variant="Variant.Filled" Disabled="@_isAnyError" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=> await this.SubmitForm())">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>_form.ResetAsync())" Class="mx-2">Reset</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<Product>? _products;
    private bool _isSuccess;
    private bool _isAnyError;
    private MudForm _form;
    private string _validationResult = "failed";

    private ProductFormModel Product { get; set; } = new ProductFormModel();
    private List<BreadcrumbItem> BreadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/TokoShopWebApp"),
        new BreadcrumbItem("Products", href: "/TokoShopWebApp/products"),
        new BreadcrumbItem("Add Product", href: null, disabled: true)
    };


    public class ProductFormModel
    {
        [Required]
        [MinLength(8, ErrorMessage = "Name length must be more than 8.")]
        public string Name { get; set; }

        [Required]
        [MinLength(8, ErrorMessage = "Description length must be more than 8.")]
        public string Description { get; set; }

        [Required]
        public string ImageUrl { get; set; }

        [Required]
        public double BasePrice { get; set; }
    }

    private void ValidChanged()
    {
        _isAnyError = !_isSuccess;
    }

    private async Task SubmitForm()
    {
        this._form.Validate().Wait();
        if (!this._isSuccess)
        {
            this._validationResult = string.Join(";", _form.Errors);
            return;
        }

        this._validationResult = "oke";
        var product = new Product()
            {
                Id = Guid.NewGuid().ToString(),
                Name = this.Product.Name,
                Description = this.Product.Description,
                ImageUrl = this.Product.ImageUrl,
                BasePrice = this.Product.BasePrice,
            };
        var result = await this.ProductService.AddProduct(product);
        if (result)
        {
            NavigationManager.NavigateTo("products");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (this._products?.Any() != true)
        {
            this._products = await this.ProductService.GetAllAsync();
        }
    }
}
